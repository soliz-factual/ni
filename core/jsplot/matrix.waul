// Matrices.
// Not a complete library; just enough stuff to get 3D linear transformation and projection. This library also generates compiled functions for fast axis-specific
// transformation.

caterwaul(':all')(function () {
  matrix(x) = (x ? +x -seq : n[16] *[+((x>>2) == (x&3))] -seq) -se- it /-caterwaul.merge/ matrix_methods,
  matrix /-caterwaul.merge/ static_methods,

  where[static_methods = capture[translate(v)         = matrix() -se [it[3] = v[0], it[7] = v[1], it[11] = v[2]],
                                 scale(v)             = matrix() -se [it[0] = v[0], it[5] = v[1], it[10] = v[2]],
                                 rotate_x(t)          = matrix() -se [it[5] = it[10] = c, it[6] = -(it[9] = -s), where [s = t /!Math.sin, c = t /!Math.cos]],
                                 rotate_y(t)          = matrix() -se [it[0] = it[10] = c, it[2] = -(it[8] = -s), where [s = t /!Math.sin, c = t /!Math.cos]],
                                 prod(xs = arguments) = xs /[x0 /~dot/ x] -seq],

        matrix_methods = capture[dot             (b, a=this) = a *[n[4] /y[0][y0 + a[xi&12 | yi] * b[yi<<2 | xi&3]] -seq] /seq /!matrix,
                                 plus            (b, a=this) = a *[b[xi] + x]                                             /seq /!matrix,
                                 trace              (a=this) = a[0] + a[5] + a[10] + a[15],
                                 det                (a=this) = this.det_ -dcq [(t1 - t2 + t3 + t4 - t5) / 24
                                                                       -where [tr1 = a.trace(),  t1 = tr1 /-Math.pow/ 4,
                                                            a2 = a  /~dot/ a,  tr2 = a2.trace(), t2 = 6 * tr2 * tr1*tr1,
                                                            a3 = a2 /~dot/ a,  tr3 = a3.trace(), t3 = 3 * tr2*tr2,
                                                            a4 = a2 /~dot/ a2, tr4 = a4.trace(), t4 = 8 * tr3*tr1, t5 = 6 * tr4]],

                                 scaled_by       (y, a=this) = a *[x * y] /seq /!matrix,
                                 inv                (a=this) = this.inv_ -dcq [(matrix().scaled_by(1/6*t1) |~plus| a.scaled_by(-0.5*t2)
                                                                                  |~plus| a2.scaled_by(t3) |~plus| a3.scaled_by(-1)) /~scaled_by/ (1/a.det())
                                                                       -where [a2 = a /~dot/ a,    a3 = a2 /~dot/ a,
                                        tr1 = a.trace(),                      tr2 = a2.trace(),   tr3 = a3.trace(),
                                        t1  = tr1*tr1*tr1 - 3*tr1*tr2 + 2*tr3, t2 = tr1*tr1 - tr2, t3 = tr1]],

                                 transform       (v, a=this) = v *[n[4] /s[0][s0 + a[xi<<2|s]*v[s]] -seq] -seq,
                                 transformer_form(d, a=this) = qse[given[x, y, z] in _a*x + _b*y + _c*z + _d]
                                                               /~replace/ {_a: '#{a[d<<2|0]}', _b: '#{a[d<<2|1]}', _c: '#{a[d<<2|2]}', _d: '#{a[d<<2|3]}'},
                                 transformer     (d, a=this) = this.transformer_form(d) /!caterwaul.compile]]})();
