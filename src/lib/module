ni->module('/lib/module', code => <<'_');
ni('ni:/class/ni')->def(
  eval => sub {
    my @r;
    wantarray ? @r = ni::eval $_[0] : $r[0] = ni::eval $_[0];
    die "$@ evaluating " . ($_[1] || "anon {$_[0]}") if $@;
    wantarray ? @r : $r[0]},

  module => sub {
    push @{shift->{modules}}, ni('ni:/class/module')->new(@_)});

ni('ni:/class/object')->child('/class/module',
                              'ni:/behavior/named',
                              'ni:/behavior/namespaced')
  ->def(
      namespace => sub {'ni.module'},
      init => sub {
        my ($self, %args) = @_;
        $$self{$_} = $args{$_} for keys %args;
      });
_
