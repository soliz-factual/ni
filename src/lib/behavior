ni->module('/lib/behavior', code => <<'_');
use strict;
use warnings;
use Scalar::Util;

no strict 'refs';

ni::name('ni:/behavior/slice' =>
  bless {
    methods => {
      apply => sub {
        my ($self, $p) = @_;
        $p = $p->package if ref $p;
        return if $$self{applied_to}{$p}++;
        $_->apply($p) for @{$$self{isa}};
        ${"$p\::ctors"}{$self} = $$self{ctor} if defined $$self{ctor};
        ${"$p\::dtors"}{$self} = $$self{dtor} if defined $$self{dtor};
        *{"$p\::(("} = sub {} if grep /^\(/, keys %{$$self{methods}};
        for (keys %{$$self{methods}}) {
          die "$self: overlapping method $p\::$_" if defined *{"$p\::$_"}{CODE};
          *{"$p\::$_"} = \&{$$self{methods}{$_}};
        }
        $self;
      }
    }
  }, '/behavior/slice');

ni('ni:/behavior/slice')->{methods}->{apply}
  ->(ni('ni:/behavior/slice'), '/behavior/slice');

ni::name('ni:/behavior/slice_init' =>
  bless {
    methods => {
      instantiate => sub {
        my $class = shift;
        my @isa;
        push @isa, shift while ref $_[0];
        my %args = @_;
        +{ctor    => delete($args{ctor}),
          dtor    => delete($args{dtor}),
          isa     => [@isa],
          methods => {%args}};
      },

      instantiation => sub {
        my $self = shift;
        (@{$$self{isa}},
         %{$$self{methods}},
         $$self{ctor} ? (ctor => $$self{ctor}) : (),
         $$self{dtor} ? (dtor => $$self{dtor}) : ());
      }
    }
  }, '/behavior/slice');

ni('ni:/behavior/slice_init')->apply('/behavior/slice');

ni::name('ni:/behavior/lifecycle' =>
  bless {
    methods => {
      new => sub {
        my $class = shift;
        my $self  = bless $class->instantiate(@_),
                    ref($class) ? $class->package : $class;
        $_->($self, @_) for values %{ref($self) . "::ctors"};
        $self;
      },
      DESTROY => sub {
        my $self = shift;
        $_->($self) for values %{ref($self) . "::dtors"};
      }
    }
  }, '/behavior/slice');

ni('ni:/behavior/lifecycle')->apply('/behavior/slice');

ni::name(
  'ni:/behavior/tag' =>
    '/behavior/slice'->new(
      apply => sub {
        my ($self, $p) = @_;
        $_->apply($p) for @{$$self{slices}};
        $self;
      }),

  'ni:/behavior/branch' =>
    '/behavior/slice'->new(
      apply => sub {
        my ($self, $p) = @_;
        $p = $p->package if ref $p;
        return if $$self{applied_to}{$p}++;
        $_->apply($p) for @{$$self{slices}};
        $self;
      },
      add => sub {
        my $self = shift;
        push @{$$self{slices}}, @_;
        for my $p (keys %{$$self{applied_to}}) {$_->apply($p) for @_}
        $self;
      }));

ni::name(
  'ni:/behavior/named' =>
    '/behavior/slice'->new(
      '(""' => sub {shift->name},
      name  => sub {my $s = shift; $s->namespace . ":$$s{name}"}));

ni::name(
  'ni:/behavior/ni_namespaced' =>
    '/behavior/slice'->new(namespace => sub {'ni'}),

  'ni:/behavior/mapped_to_package' =>
    '/behavior/slice'->new(package => sub {shift->{name}}),

  'ni:/behavior/named_transient' =>
    '/behavior/slice'->new(
      ni"ni:/behavior/named",
      ctor => sub {my $s = shift; Scalar::Util::weaken($ni::named{$s->name} = $s)},
      dtor => sub {delete $ni::named{shift->name}}),

  'ni:/behavior/named_persistent' =>
    '/behavior/slice'->new(
      ni"ni:/behavior/named",
      ctor => sub {my $self = shift; ni::name($self->name, $self)}));
_
