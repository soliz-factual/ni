ni('ni:/lib/ni_static')->def('/lib/ni_static_util.b',
  sgr  => fn q{(my $x = $_[0]) =~ s/$_[1]/$_[2]/g; $x},
  sr   => fn q{(my $x = $_[0]) =~ s/$_[1]/$_[2]/;  $x},
  swap => fn q{@_[0, 1] = @_[1, 0]},
  dor  => fn q{defined $_[0] ? $_[0] : $_[1]},

  sum  => fn q{local $_; my $x = 0; $x += $_ for @_; $x},
  mean => fn q{sum(@_) / (@_ || 1)},

  max    => fn q{local $_; my $m = pop @_; $m = $m >  $_ ? $m : $_ for @_; $m},
  min    => fn q{local $_; my $m = pop @_; $m = $m <  $_ ? $m : $_ for @_; $m},
  maxstr => fn q{local $_; my $m = pop @_; $m = $m gt $_ ? $m : $_ for @_; $m},
  minstr => fn q{local $_; my $m = pop @_; $m = $m lt $_ ? $m : $_ for @_; $m},

  abbrev => fn q{length($_[0]) < $_[1] ? $_[0] : substr($_[0], 0, $_[1] - 3) . '...'},

  indent => fn q{
    my ($s, $indent) = (@_, 2);
    join "\n", map ' ' x $indent . $_, split /\n/, $s;
  });
