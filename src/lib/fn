ni('ni:/lib/slice')->new('/lib/fn_init.b',
  instantiate => fn q{
    my $class = shift;
    my $code  = pop;
    my $proto = @_ && $_[-1] =~ /^\(/ ? pop : '';
    +{code        => $code,
      proto       => $proto,
      annotations => [@_]};
  },
  compile => fn q{
    local $@;
    my $self = shift;
    $$self{proto} ||= '';
    $$self{fn} = ni::eval "sub $$self{proto} {$$self{code}\n}";
    die "ni:/lib/fn: failed to compile $$self{code}: $@" if $@;
    $$self{fn};
  },
  ctor => fn q{shift->compile});

delete @{'/lib/fn::'}{qw/new compile/};
ni('ni:/object')->child('/lib/fn', '/lib/instantiable.b', '/lib/fn_init.b');

ni('ni:/lib/fn')
  ->ro('/lib/fn_ro.b', qw/code annotations fn/)
  ->def('/lib/fn_ops.b',
    '(""' => fn q{shift->{code}},
    '(eq' => fn q{
      ref($_[0]) eq ref($_[1])
        and Scalar::Util::refaddr($_[0]) == Scalar::Util::refaddr($_[1])});

delete ${'main::'}{fn};

ni('ni:main')->def('/lib/static_fn.b',
  fn => ni('ni:/lib/fn')->new('($)', q{ni('ni:/lib/fn')->new(@_)}),
  fp => ni('ni:/lib/fn')->new('($$)', q{ni('ni:/lib/fn')->new(@_)}));
