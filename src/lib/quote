use Scalar::Util;

# TODO: rewrite all of this to use a mutable object that tracks dependencies in
# realtime. Otherwise we can't reconstruct edges in the object graph.
ni->def(
  'ni::quote_hash'   => fn q{'{' . join(',', map ni::quote_value($_), %{+shift}) . '}'},
  'ni::quote_array'  => fn q{'[' . join(',', map ni::quote_value($_), @{+shift}) . ']'},
  'ni::quote_blessed' => fn q{
    # TODO
  },
  'ni::quote_scalar' => fn q{
    my $v = shift;
    return 'undef' unless defined $v;
    return $v if Scalar::Util::looks_like_number $v;
    $v =~ s/([\\'])/\\$1/g;
    "q'$v'";
  },
  'ni::quote_value' => fn q{
    my $v = shift;
    return ni::quote_hash($v)    if 'HASH'  eq ref $v;
    return ni::quote_array($v)   if 'ARRAY' eq ref $v;
    return ni::quote_blessed($v) if ref $v;
    ni::quote_scalar($v);
  });
