ni('ni:/object')->child('/unix/io')
  ->def('/unix/io_ops.b', '(bool' => fn q{1})
  ->def('/unix/io_stream.b',
    into => fn q{
      local $_;
      my ($self, $dest, $each) = @_;
      my $block_size = $self->can('read_size') ? $self->read_size : 8192;
      while ($self->read($_, $block_size)) {
        &$each($_) if defined $each;
        $dest->write($_);
      }
    })

  ->def('/unix/io_constructors.b',
    '(+' => fn q{ni('ni:/unix/cat')->new(@_[0, 1])})

  ->def('/unix/io_memory.b',
    read_all => fn q{
      shift->into(ni("ni:/unix/str")->new(my $data = ""));
      $data;
    })

  ->def('/unix/io_readers.b',
    '(@{}' => fn q{my $self = shift; [<$self>]},
    '(<>' => fn q{
      my $fh = shift->read_fh;
      # TODO: buffered line reading with a pushback queue
    });
