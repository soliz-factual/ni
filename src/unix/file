ni('ni:/unix/io')->child('/unix/file')
  ->ro('/unix/file_readers.b', 'name')
  ->def('/unix/file_init.b',
    instantiate => fn q{
      my ($class, $name) = @_;
      +{name => $name, fh => undef};
    })

  ->has_fd
  ->def('/unix/file_io.b',
    read_fh => fn q{
      my $self = shift;
      return $self->{fh} if Scalar::Util::openhandle $self->{fh};
      open my $fh, '<', $self->{name}
        or die "ni:/unix/file $self->{name} failed to read: $!";
      $self->{fh} = $fh;
    },
    write_fh => fn q{
      my $self = shift;
      return $self->{fh} if Scalar::Util::openhandle $self->{fh};
      open my $fh, '>', $self->{name}
        or die "ni:/unix/file $self->{name} failed to write: $!";
      $self->{fh} = $fh;
    });

ni->resolver_for(file => fn q{
  my $f = shift;
  $f =~ s/^file:(?:\/\/)?//;
  ni('ni:/unix/file')->new($f);
});
