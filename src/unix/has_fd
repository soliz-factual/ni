ni('ni:/lib/branch')->new('/unix/has_fd.b')
  ->def('/unix/fd_accessors.b',
    read_fd  => fn q{ni("ni:/unix/fd")->new(fileno shift->read_fh)},
    write_fd => fn q{ni("ni:/unix/fd")->new(fileno shift->write_fh)})

  ->def('/unix/fd_safeio.b',
    read => fn q{
      no warnings 'io';
      use Errno qw/EINTR/;
      my $fh = shift->read_fh;
      my $n;
      do {
        return $n if defined($n = read $fh, $_[0], $_[1], $_[2] || 0);
      } while $!{EINTR};
      return undef;
    },

    write => fn q{
      my $fh = shift->write_fh;
      my $n;
      do {
        return $n if defined($n = syswrite $fh, $_[0]);
      } while $!{EINTR};
      return undef;
    });

ni('ni:/unix/io.c')->def('/unix/io.c_has_fd.b',
  has_fd => fn q{shift->add('/unix/has_fd.b')});
