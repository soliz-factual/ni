ni('ni:/class/class')->doc(<<'_');
# Metaclass protocol
If you begin by assuming ni uses the Smalltalk-80 metaclass protocol, you'll be
mostly correct. There are two significant modifications:

1. ni's classes are built from a union of slices.
2. ...because of this, ni's objects don't provide inheritance -- but they can
   be used as members of unions, which is much more powerful.

I assume you've read the documentation for `/class/behavior` already; if you
haven't yet, the below probably won't make sense.

## How classes are created
ni provides two behaviors for slice-union objects: `/behavior/tag` and
`/behavior/branch`; like the corresponding objects in git, tags are immutable
while branches support modifications and, when modified, update all packages to
which they've been applied. We use this instead of Perl's `@ISA` for a number
of reasons, primarily because we want to proactively fail on any method
collisions and we can't rely on Perl's `mro` pragma on older versions.

Metaclasses like `/class/class` incorporate `/behavior/branch`: any updates you
make to them apply immediately to the packages on which they're installed.

## Metaclasses and metaslices
A simplified drawing of Smalltalk's metaclass protocol looks like this:

```
         +--------------------------------iof------+
         |                                         V
         |             +--- class_meta <--iof--- class
         |             |       ^^                  ^^
         |             |       || sub              || sub
         |             |       ||                  ||
     metaclass <--iof--+-- class1_meta <--iof--- class1 <--iof--- instance1
                       |       ^^                  ^^
                       |       || sub              || sub
                       |       ||                  ||
                       +-- class2_meta <--iof--- class2 <--iof--- instance2
```

ni's metaclass protocol is similar, except that `A sub B` is more accurately
written as `A superset B`: its slice union encompasses everything in B. This
and single-subclassing are two incompatible operations because slices don't
support overriding and single-inheritance subclassing doesn't support multiple
parenting.

ni also extends the metaclass protocol to slices themselves; here's what the
above looks like:

```
# TODO

         +--------------------------------iof------+
         |                                         V
         |             +--- class_meta <--iof--- slice
         |             |       ^^                  ^^
         |             |       || sub              || sub
         |             |       ||                  ||
     metaslice <--iof--+-- class1_meta <--iof--- class1 <--iof--- instance1
                       |       ^^                  ^^
                       |       || sub              || sub
                       |       ||                  ||
                       +-- class2_meta <--iof--- class2 <--iof--- instance2
```
_
