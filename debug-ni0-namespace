print STDERR 1, "
";
#!/usr/bin/env perl
print STDERR 2, "
";
$ni::license=<<'_';
print STDERR 3, "
";
ni: https://github.com/spencertipping/ni
Copyright (c) 2016-2017 Spencer Tipping

MIT license

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
print STDERR 4, "
";
_
print STDERR 5, "
";
BEGIN{eval($ni::boot=<<'_')}
print STDERR 6, "
";
use Scalar::Util;
chomp $ni::boot, $ni::license;
$ni::self = bless {}, '/class/ni';
sub ni(;$) {@_ ? ref($_[0]) ? $_[0] : $ni::named{$_[0]} || die "ni: failed to resolve $_[0]" : $ni::self}
sub ni::name {my %h = @_; delete @h{grep !defined, keys %h}; @ni::named{keys %h} = values %h}
sub ni::eval {eval shift}
*{"/class/ni::def"} = sub {
  my ($self, %kvs) = @_;
  $ni::named{"ni.def:$_"} = $kvs{$_} for keys %kvs;
  *$_ = $kvs{$_} for keys %kvs;
};
*{'/class/fn::new'} = sub {
  my $self = bless {code => $_[1]}, $_[0];
  $self->compile;
  $self;
};
*{'/class/fn::compile'} = sub {
  my $self = shift;
  $$self{fn} = ni::eval "sub{$$self{code}\n}";
  die "ni:/class/fn failed to compile $$self{code}: $@\n" if $@;
  $$self{fn};
};
*{'/class/fn::(('}    = sub {};
*{'/class/fn::(&{}'}  = sub {$_[0]->{fn} ||= $_[0]->compile};
*{'/class/fn::(bool'} = sub {1};
sub fn($) {'/class/fn'->new(shift)}
print STDERR 7, "
";
_
print STDERR 8, "
";
$c='';
print STDERR 9, "
";
$d=q'applied_to';
print STDERR 10, "
";
$e=q'/class/class';
print STDERR 11, "
";
$f={$e,1};
print STDERR 12, "
";
$g='name';
print STDERR 13, "
";
$h='slices';
print STDERR 14, "
";
$i=q'/class/slice';
print STDERR 15, "
";
$j={$e,2,$i,1};
print STDERR 16, "
";
$k=q'/class/behavior';
print STDERR 17, "
";
$l=q'/class/fn';
print STDERR 18, "
";
$m={$l,1};
print STDERR 19, "
";
$n={};
print STDERR 20, "
";
$o='ctor';
print STDERR 21, "
";
$p='dtor';
print STDERR 22, "
";
$q='isa';
print STDERR 23, "
";
$r=[];
print STDERR 24, "
";
$s='methods';
print STDERR 25, "
";
$t='DESTROY';
print STDERR 26, "
";
$u='code';
print STDERR 27, "
";
$v=q'my $self = shift;
my $h = \\%{ref($self) . "::dtors"};
$_->($self) for @$h{sort keys %$h};';
print STDERR 28, "
";
$w=bless({$u,$v},$l);
print STDERR 29, "
";
$x='new';
print STDERR 30, "
";
$y=q'my $class = ref $_[0] ? shift->package : shift;
my $self = bless $class->instantiate(@_), $class;
my $h = \\%{ref($self) . "::ctors"};
$_->($self, @_) for @$h{sort keys %$h};
$self;';
print STDERR 31, "
";
$z=bless({$u,$y},$l);
print STDERR 32, "
";
$A={$t,$w,$x,$z};
print STDERR 33, "
";
$B=q'/behavior/lifecycle';
print STDERR 34, "
";
$C=bless({$d,$n,$o,$c,$p,$c,$q,$r,$s,$A,$g,$B},$i);
print STDERR 35, "
";
$D=q'/behavior/slice';
print STDERR 36, "
";
$E=$C;
print STDERR 37, "
";
$F={};
print STDERR 38, "
";
$G=q'shift->compile';
print STDERR 39, "
";
$H=bless({$u,$G},$l);
print STDERR 40, "
";
$I=[];
print STDERR 41, "
";
$J='compile';
print STDERR 42, "
";
$K=q'my $self = shift;
$$self{fn} = ni::eval "sub{$$self{code}\\n}";
die "ni:/behavior/fn_init: failed to compile $$self{code}: $@" if $@;
$$self{fn};';
print STDERR 43, "
";
$L=bless({$u,$K},$l);
print STDERR 44, "
";
$M=q'instantiate';
print STDERR 45, "
";
$N=q'my $class = shift;
my $code  = pop;
+{code        => $code,
  annotations => [@_]};';
print STDERR 46, "
";
$O=bless({$u,$N},$l);
print STDERR 47, "
";
$P={$J,$L,$M,$O};
print STDERR 48, "
";
$Q=q'/behavior/fn_init';
print STDERR 49, "
";
$R=bless({$d,$F,$o,$H,$p,$c,$q,$I,$s,$P,$g,$Q},$i);
print STDERR 50, "
";
$S=$R;
print STDERR 51, "
";
$T={};
print STDERR 52, "
";
$U=[];
print STDERR 53, "
";
$V=q'serialize';
print STDERR 54, "
";
$W=q'annotations';
print STDERR 55, "
";
$X=[];
print STDERR 56, "
";
$Y=q'my ($self, $quote) = @_;
$quote->quote_class(ref $self);

(my $code = $$self{code}) =~ s/^\\s*|\\s*$//g;
my @lines = split /\\n/, $code;
my $spaces = length $code;
for (@lines) {
  $spaces = length $1 if /^(\\h+)/ && length $1 < $spaces;
}
my $pattern = \' \' x $spaces;
s/^$pattern// for @lines;

my %state = %$self;
delete $state{fn};
$state{code} = join "\\n", @lines;
$quote->quote_blessed(\\%state, ref $self);';
print STDERR 57, "
";
$Z=bless({$W,$X,$u,$Y},$l);
print STDERR 58, "
";
$c1={$V,$Z};
print STDERR 59, "
";
$d1=bless({$d,$T,$o,$c,$p,$c,$q,$U,$s,$c1,$g,$c},$i);
print STDERR 60, "
";
$e1=$d1;
print STDERR 61, "
";
$f1=[$E,$S,$e1];
print STDERR 62, "
";
$g1=bless({$d,$m,$g,$l,$h,$f1},$e);
print STDERR 63, "
";
$h1=q'my ($self, $p) = @_;
$p = $p->package if ref $p;
return if $$self{applied_to}{$p};
for (keys %{$$self{methods}}) {
  die "$self: overlapping method $p\\::$_" if defined *{"$p\\::$_"}{CODE};
}
$self->apply_unsafe($p);';
print STDERR 64, "
";
$i1=bless({$u,$h1},$l);
print STDERR 65, "
";
$j1=q'my ($self, $p) = @_;
return if $$self{applied_to}{$p}++;
$_->apply($p) for @{$$self{isa}};
${"$p\\::ctors"}{$self} = $$self{ctor} if defined $$self{ctor};
${"$p\\::dtors"}{$self} = $$self{dtor} if defined $$self{dtor};
*{"$p\\::(("} = sub {} if grep /^\\(/, keys %{$$self{methods}};
*{"$p\\::$_"} = \\&{$$self{methods}{$_}} for keys %{$$self{methods}};
$self;';
print STDERR 66, "
";
$k1=bless({$u,$j1},$l);
print STDERR 67, "
";
$l1=q'/behavior/slice::apply';
print STDERR 68, "
";
$m1=q'/behavior/slice::apply_unsafe';
print STDERR 69, "
";
$n1=q'/class/slice::apply';
print STDERR 70, "
";
$o1=q'/class/slice::apply_unsafe';
print STDERR 71, "
";
$p1={};
print STDERR 72, "
";
$q1=[];
print STDERR 73, "
";
$r1='apply';
print STDERR 74, "
";
$s1=q'apply_unsafe';
print STDERR 75, "
";
$t1={$r1,$i1,$s1,$k1};
print STDERR 76, "
";
$u1=bless({$d,$p1,$o,$c,$p,$c,$q,$q1,$s,$t1,$g,$D},$i);
print STDERR 77, "
";
$v1=$u1;
print STDERR 78, "
";
$w1={$D,1,$e,1,$l,1,$i,1};
print STDERR 79, "
";
$x1=[];
print STDERR 80, "
";
$y1={$t,$w,$x,$z};
print STDERR 81, "
";
$z1=bless({$d,$w1,$q,$x1,$s,$y1},$D);
print STDERR 82, "
";
$A1={$e,1,$i,1};
print STDERR 83, "
";
$B1=[];
print STDERR 84, "
";
$C1='package';
print STDERR 85, "
";
$D1=q'shift->{name}';
print STDERR 86, "
";
$E1=bless({$u,$D1},$l);
print STDERR 87, "
";
$F1={$C1,$E1};
print STDERR 88, "
";
$G1=bless({$d,$A1,$o,$c,$p,$c,$q,$B1,$s,$F1},$D);
print STDERR 89, "
";
$H1={$e,1,$i,1};
print STDERR 90, "
";
$I1=[];
print STDERR 91, "
";
$J1=q'namespace';
print STDERR 92, "
";
$K1='\'ni\'';
print STDERR 93, "
";
$L1=bless({$u,$K1},$l);
print STDERR 94, "
";
$M1={$J1,$L1};
print STDERR 95, "
";
$N1=bless({$d,$H1,$o,$c,$p,$c,$q,$I1,$s,$M1},$D);
print STDERR 96, "
";
$O1={$e,1,$i,1};
print STDERR 97, "
";
$P1=q'my $self = shift; ni::name($self->name, $self)';
print STDERR 98, "
";
$Q1=bless({$u,$P1},$l);
print STDERR 99, "
";
$R1={$e,1,$i,1};
print STDERR 100, "
";
$S1=[];
print STDERR 101, "
";
$T1='(""';
print STDERR 102, "
";
$U1=q'shift->name';
print STDERR 103, "
";
$V1=bless({$u,$U1},$l);
print STDERR 104, "
";
$W1=q'my $s = shift;
return undef unless defined $$s{name};
$s->namespace . ":$$s{name}";';
print STDERR 105, "
";
$X1=bless({$u,$W1},$l);
print STDERR 106, "
";
$Y1={$T1,$V1,$g,$X1};
print STDERR 107, "
";
$Z1=bless({$d,$R1,$o,$c,$p,$c,$q,$S1,$s,$Y1},$D);
print STDERR 108, "
";
$c2=[$Z1];
print STDERR 109, "
";
$d2={};
print STDERR 110, "
";
$e2=bless({$d,$O1,$o,$Q1,$p,$c,$q,$c2,$s,$d2},$D);
print STDERR 111, "
";
$f2=[$z1,$G1,$N1,$e2];
print STDERR 112, "
";
$g2=bless({$d,$j,$g,$k,$h,$f2},$e);
print STDERR 113, "
";
$h2={$e,1};
print STDERR 114, "
";
$i2=[];
print STDERR 115, "
";
$j2='add';
print STDERR 116, "
";
$k2=q'my $self = shift;
push @{$$self{slices}}, @_;
for my $p (keys %{$$self{applied_to}}) {$_->apply($p) for @_}
$self;';
print STDERR 117, "
";
$l2=bless({$u,$k2},$l);
print STDERR 118, "
";
$m2=q'my ($self, $p) = @_;
$p = $p->package if ref $p;
return if $$self{applied_to}{$p}++;
$_->apply($p) for @{$$self{slices}};
$self;';
print STDERR 119, "
";
$n2=bless({$u,$m2},$l);
print STDERR 120, "
";
$o2={$j2,$l2,$r1,$n2};
print STDERR 121, "
";
$p2=bless({$d,$h2,$o,$c,$p,$c,$q,$i2,$s,$o2},$D);
print STDERR 122, "
";
$q2={};
print STDERR 123, "
";
$r2=[];
print STDERR 124, "
";
$s2='def';
print STDERR 125, "
";
$t2=q'shift->add(ni(\'ni:/class/slice\')->new(undef, @_))';
print STDERR 126, "
";
$u2=bless({$u,$t2},$l);
print STDERR 127, "
";
$v2={$s2,$u2};
print STDERR 128, "
";
$w2=q'/behavior/class_method_def';
print STDERR 129, "
";
$x2=bless({$d,$q2,$o,$c,$p,$c,$q,$r2,$s,$v2,$g,$w2},$i);
print STDERR 130, "
";
$y2=$x2;
print STDERR 131, "
";
$z2=[$g2,$p2,$y2];
print STDERR 132, "
";
$A2=bless({$d,$f,$g,$e,$h,$z2},$e);
print STDERR 133, "
";
$B2={$i,1};
print STDERR 134, "
";
$C2={$D,1,$i,1};
print STDERR 135, "
";
$D2=[];
print STDERR 136, "
";
$E2={$r1,$i1,$s1,$k1};
print STDERR 137, "
";
$F2=bless({$d,$C2,$q,$D2,$s,$E2},$D);
print STDERR 138, "
";
$G2={$i,1};
print STDERR 139, "
";
$H2=[];
print STDERR 140, "
";
$I2=q'my ($class, $name, @methods) = @_;
my $self = &{\'/behavior/slice::instantiate\'}($class, @methods);
$$self{name} = $name;
$self;';
print STDERR 141, "
";
$J2=bless({$u,$I2},$l);
print STDERR 142, "
";
$K2={$M,$J2};
print STDERR 143, "
";
$L2=bless({$d,$G2,$o,$c,$p,$c,$q,$H2,$s,$K2},$D);
print STDERR 144, "
";
$M2={};
print STDERR 145, "
";
$N2=[];
print STDERR 146, "
";
$O2=[];
print STDERR 147, "
";
$P2=q'my ($self, $quote) = @_;
if ($self->name eq \'ni:/behavior/slice\') {
  my %methods;
  @methods{keys %{$$self{methods}}} =
    map $quote->quote($_), values %{$$self{methods}};
  for my $p (sort keys %{$$self{applied_to}}) {
    $quote->boot_side_effect(
      "\\*{" . $quote->quote("$p\\::$_") . "}=\\\\\\&$methods{$_};")
      for sort keys %methods;
  }
}

$quote->quote_class(ref $self);
my %state = %$self;
$state{applied_to} = {};
my $g = $quote->allocate_gensym($self,
  $quote->quote_blessed(\\%state, ref $self));
$quote->side_effect("$g\\->apply_unsafe(" . $quote->quote($_) . ");")
  for sort keys %{$$self{applied_to}};
$g;';
print STDERR 148, "
";
$Q2=bless({$W,$O2,$u,$P2},$l);
print STDERR 149, "
";
$R2={$V,$Q2};
print STDERR 150, "
";
$S2=bless({$d,$M2,$o,$c,$p,$c,$q,$N2,$s,$R2,$g,$c},$i);
print STDERR 151, "
";
$T2=$S2;
print STDERR 152, "
";
$U2=[$g2,$F2,$L2,$T2];
print STDERR 153, "
";
$V2=bless({$d,$B2,$g,$i,$h,$U2},$e);
print STDERR 154, "
";
$W2={};
print STDERR 155, "
";
$X2=[];
print STDERR 156, "
";
$Y2=q'internal/image';
print STDERR 157, "
";
$Z2=[];
print STDERR 158, "
";
$c3=q'my $self = shift;
my $q = ni(\'ni:/class/image\')->new->partial_image(keys %ni::named);
$q->quote($self);
$q->write(\\*STDOUT);
0;';
print STDERR 159, "
";
$d3=bless({$W,$Z2,$u,$c3},$l);
print STDERR 160, "
";
$e3='run';
print STDERR 161, "
";
$f3=[];
print STDERR 162, "
";
$g3=q'my $self = shift;
shift, exit $self->$1(@_) if $_[0] =~ /^--(.*)$/ && $self->can($1);
exit $self->default(@_);';
print STDERR 163, "
";
$h3=bless({$W,$f3,$u,$g3},$l);
print STDERR 164, "
";
$i3={$Y2,$d3,$e3,$h3};
print STDERR 165, "
";
$j3=bless({$d,$W2,$o,$c,$p,$c,$q,$X2,$s,$i3,$g,$c},$i);
print STDERR 166, "
";
$k3=q'/class/ni';
print STDERR 167, "
";
$l3=$j3;
print STDERR 168, "
";
$m3=q'ni:/behavior/branch';
print STDERR 169, "
";
$n3=[];
print STDERR 170, "
";
$o3={$j2,$l2,$r1,$n2};
print STDERR 171, "
";
$p3=q'/behavior/branch';
print STDERR 172, "
";
$q3=bless({$d,$m2,$o,$c,$p,$c,$q,$n3,$s,$o3,$g,$p3},$i);
print STDERR 173, "
";
$r3=$q3;
print STDERR 174, "
";
$s3=q'ni:/behavior/class_init';
print STDERR 175, "
";
$t3={};
print STDERR 176, "
";
$u3=q'my $s = shift; $s->apply($s->package)';
print STDERR 177, "
";
$v3=bless({$u,$u3},$l);
print STDERR 178, "
";
$w3=[];
print STDERR 179, "
";
$x3=q'my ($class, $name, @slices) = @_;
+{name   => $name,
  slices => [map ref($_) ? $_ : ni($_), @slices]};';
print STDERR 180, "
";
$y3=bless({$u,$x3},$l);
print STDERR 181, "
";
$z3={$M,$y3};
print STDERR 182, "
";
$A3=q'/behavior/class_init';
print STDERR 183, "
";
$B3=bless({$d,$t3,$o,$v3,$p,$c,$q,$w3,$s,$z3,$g,$A3},$i);
print STDERR 184, "
";
$C3=$B3;
print STDERR 185, "
";
$D3=q'ni:/behavior/class_method_def';
print STDERR 186, "
";
$E3=q'ni:/behavior/fn_init';
print STDERR 187, "
";
$F3=q'ni:/behavior/image_init';
print STDERR 188, "
";
$G3={};
print STDERR 189, "
";
$H3=[];
print STDERR 190, "
";
$I3=[];
print STDERR 191, "
";
$J3=q'my $class = shift;
my %include;
@include{@_} = map 1, @_;
+{include      => \\%include,
  gensym_n     => 0,
  circular     => [],
  definitions  => {},
  side_effects => [],
  visited      => {},
  ordering     => []};';
print STDERR 192, "
";
$K3=bless({$W,$I3,$u,$J3},$l);
print STDERR 193, "
";
$L3={$M,$K3};
print STDERR 194, "
";
$M3=q'/behavior/image_init';
print STDERR 195, "
";
$N3=bless({$d,$G3,$o,$c,$p,$c,$q,$H3,$s,$L3,$g,$M3},$i);
print STDERR 196, "
";
$O3=q'/class/image';
print STDERR 197, "
";
$P3=$N3;
print STDERR 198, "
";
$Q3=q'ni:/behavior/image_quoting';
print STDERR 199, "
";
$R3={};
print STDERR 200, "
";
$S3=[];
print STDERR 201, "
";
$T3='address';
print STDERR 202, "
";
$U3=[];
print STDERR 203, "
";
$V3=q'return $_[1] if !ref $_[1] && length $_[1] < 64;
Scalar::Util::refaddr(ref $_[1] ? $_[1] : \\$_[1]);';
print STDERR 204, "
";
$W3=bless({$W,$U3,$u,$V3},$l);
print STDERR 205, "
";
$X3=q'allocate_gensym';
print STDERR 206, "
";
$Y3=[];
print STDERR 207, "
";
$Z3=q'my $self = shift;
my $a = $self->address(shift);
my $g = $$self{visited}{$a} = $self->gensym;
$$self{definitions}{$g} = "$g=$_[0];";
push @{$$self{ordering}}, $g;
$g;';
print STDERR 208, "
";
$c4=bless({$W,$Y3,$u,$Z3},$l);
print STDERR 209, "
";
$d4=q'boot_side_effect';
print STDERR 210, "
";
$e4=[];
print STDERR 211, "
";
$f4=q'unshift @{${$_[0]}{side_effects}}, $_[1]; $_[0]';
print STDERR 212, "
";
$g4=bless({$W,$e4,$u,$f4},$l);
print STDERR 213, "
";
$h4=q'circular_links';
print STDERR 214, "
";
$i4=[];
print STDERR 215, "
";
$j4=q'my $self = shift;
map "$$self{visited}{$$_[0]}$$_[1]=$$self{visited}{$$_[2]};",
    @{$$self{circular}};';
print STDERR 216, "
";
$k4=bless({$W,$i4,$u,$j4},$l);
print STDERR 217, "
";
$l4='gensym';
print STDERR 218, "
";
$m4=[];
print STDERR 219, "
";
$n4=q'my $n = shift->{gensym_n}++;
my $s = \'$\' .
  substr "cdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
         $n % 50, 1;
$n = int $n / 50;
while ($n) {
  $s .= substr "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_",
               $n % 63, 1;
  $n = int %n / 63;
}
$s;';
print STDERR 220, "
";
$o4=bless({$W,$m4,$u,$n4},$l);
print STDERR 221, "
";
$p4=q'is_circular';
print STDERR 222, "
";
$q4=[];
print STDERR 223, "
";
$r4=q'my $self = shift;
ref $$self{visited}{$self->address($_[0])};';
print STDERR 224, "
";
$s4=bless({$W,$q4,$u,$r4},$l);
print STDERR 225, "
";
$t4=q'partial_image';
print STDERR 226, "
";
$u4=[];
print STDERR 227, "
";
$v4=q'my $self = shift;
my %names;
@names{@_} = @ni::named{@_};
my $g = $self->quote(\\%names);
$self->side_effect("\\%ni::named=\\%$g;");';
print STDERR 228, "
";
$w4=bless({$W,$u4,$u,$v4},$l);
print STDERR 229, "
";
$x4='quote';
print STDERR 230, "
";
$y4=[];
print STDERR 231, "
";
$z4=q'my $self = shift;
return $self->quote_scalar($_[0])
  if !ref $_[0] && Scalar::Util::looks_like_number($_[0]);
my $a = $self->address($_[0]);
my $v = $$self{visited}{$a};
return ref $v ? \'undef\' : $v if defined $v;
$$self{visited}{$a} = \\\'undef\';
$self->allocate_gensym($_[0], $self->quote_value($_[0]));';
print STDERR 232, "
";
$A4=bless({$W,$y4,$u,$z4},$l);
print STDERR 233, "
";
$B4=q'quote_array';
print STDERR 234, "
";
$C4=[];
print STDERR 235, "
";
$D4=q'my ($self, $v) = @_;
my $a = $self->address($v);
$self->is_circular($$v[$_])
  && push @{$$self{circular}}, [$a, "[$_]", $self->address($$v[$_])]
for 0..$#v;
\'[\' . join(\',\', map $self->quote($_), @$v) . \']\';';
print STDERR 236, "
";
$E4=bless({$W,$C4,$u,$D4},$l);
print STDERR 237, "
";
$F4=q'quote_blessed';
print STDERR 238, "
";
$G4=[];
print STDERR 239, "
";
$H4=q'my ($self, $x, $r) = @_;
$r ||= ref $x;
$self->quote_class($r);
my $quote_fn = \'quote_\' . lc Scalar::Util::reftype $x;
my $quoted   = $self->$quote_fn($x);
"bless($quoted," . $self->quote($r) . ")";';
print STDERR 240, "
";
$I4=bless({$W,$G4,$u,$H4},$l);
print STDERR 241, "
";
$J4=q'quote_class';
print STDERR 242, "
";
$K4=[];
print STDERR 243, "
";
$L4=q'my ($self, $class) = @_;
$self->quote(ni"ni:$class") if exists $ni::named{"ni:$class"};';
print STDERR 244, "
";
$M4=bless({$W,$K4,$u,$L4},$l);
print STDERR 245, "
";
$N4=q'quote_hash';
print STDERR 246, "
";
$O4=[];
print STDERR 247, "
";
$P4=q'my ($self, $v) = @_;
my $a = $self->address($v);
my @ks = sort keys %$v;
$self->is_circular($$v{$_})
  && push @{$$self{circular}}, [$a, "{" . $self->quote($_) . "}",
                                    $self->address($$v{$_})]
for @ks;
\'{\' . join(\',\', map $self->quote($_), %$v{@ks}) . \'}\';';
print STDERR 248, "
";
$Q4=bless({$W,$O4,$u,$P4},$l);
print STDERR 249, "
";
$R4=q'quote_object';
print STDERR 250, "
";
$S4=[];
print STDERR 251, "
";
$T4=q'my $self = shift;
return $_[0]->serialize($self) if $_[0]->can(\'serialize\');
$self->quote_blessed(@_);';
print STDERR 252, "
";
$U4=bless({$W,$S4,$u,$T4},$l);
print STDERR 253, "
";
$V4=q'quote_scalar';
print STDERR 254, "
";
$W4=[];
print STDERR 255, "
";
$X4=q'my $v = $_[1];
return \'undef\' unless defined $v;
return $v if Scalar::Util::looks_like_number $v;
$v =~ s/([\\\\\'])/\\\\$1/g;
length $v > 8 ? "q\'$v\'" : "\'$v\'";';
print STDERR 256, "
";
$Y4=bless({$W,$W4,$u,$X4},$l);
print STDERR 257, "
";
$Z4=q'quote_value';
print STDERR 258, "
";
$c5=[];
print STDERR 259, "
";
$d5=q'my $self = shift;
return $self->quote_scalar($_[0]) unless ref $_[0];
return $self->quote_array($_[0])  if \'ARRAY\' eq ref $_[0];
return $self->quote_hash($_[0])   if \'HASH\'  eq ref $_[0];
die "cannot serialize $_[0]"      if \'CODE\'  eq ref $_[0];
$self->quote_object($_[0]);';
print STDERR 260, "
";
$e5=bless({$W,$c5,$u,$d5},$l);
print STDERR 261, "
";
$f5=q'side_effect';
print STDERR 262, "
";
$g5=[];
print STDERR 263, "
";
$h5=q'push    @{${$_[0]}{side_effects}}, $_[1]; $_[0]';
print STDERR 264, "
";
$i5=bless({$W,$g5,$u,$h5},$l);
print STDERR 265, "
";
$j5='write';
print STDERR 266, "
";
$k5=[];
print STDERR 267, "
";
$l5=q'my ($self, $fh) = @_;
my $n = 0;
$fh->print("print STDERR " . ++$n . ", \\"\\n\\";\\n", $_, "\\n") for
  "#!/usr/bin/env perl",
  "\\$ni::license=<<\'_\';", $ni::license, \'_\',
  "BEGIN{eval(\\$ni::boot=<<\'_\')}", $ni::boot, \'_\',
  @{$$self{definitions}}{@{$$self{ordering}}},
  $self->circular_links,
  @{$$self{side_effects}},
  "ni->run(\\@ARGV);",
  "__DATA__";';
print STDERR 268, "
";
$m5=bless({$W,$k5,$u,$l5},$l);
print STDERR 269, "
";
$n5={$T3,$W3,$X3,$c4,$d4,$g4,$h4,$k4,$l4,$o4,$p4,$s4,$t4,$w4,$x4,$A4,$B4,$E4,$F4,$I4,$J4,$M4,$N4,$Q4,$R4,$U4,$V4,$Y4,$Z4,$e5,$f5,$i5,$j5,$m5};
print STDERR 270, "
";
$o5=q'/behavior/image_quoting';
print STDERR 271, "
";
$p5=bless({$d,$R3,$o,$c,$p,$c,$q,$S3,$s,$n5,$g,$o5},$i);
print STDERR 272, "
";
$q5=$p5;
print STDERR 273, "
";
$r5=q'ni:/behavior/lifecycle';
print STDERR 274, "
";
$s5=q'ni:/behavior/mapped_to_package';
print STDERR 275, "
";
$t5={};
print STDERR 276, "
";
$u5=[];
print STDERR 277, "
";
$v5={$C1,$E1};
print STDERR 278, "
";
$w5=q'/behavior/mapped_to_package';
print STDERR 279, "
";
$x5=bless({$d,$t5,$o,$c,$p,$c,$q,$u5,$s,$v5,$g,$w5},$i);
print STDERR 280, "
";
$y5=$x5;
print STDERR 281, "
";
$z5=q'ni:/behavior/named';
print STDERR 282, "
";
$A5={};
print STDERR 283, "
";
$B5=[];
print STDERR 284, "
";
$C5={$T1,$V1,$g,$X1};
print STDERR 285, "
";
$D5=q'/behavior/named';
print STDERR 286, "
";
$E5=bless({$d,$A5,$o,$c,$p,$c,$q,$B5,$s,$C5,$g,$D5},$i);
print STDERR 287, "
";
$F5=$E5;
print STDERR 288, "
";
$G5=q'ni:/behavior/named_persistent';
print STDERR 289, "
";
$H5={};
print STDERR 290, "
";
$I5=[$Z1];
print STDERR 291, "
";
$J5={};
print STDERR 292, "
";
$K5=q'/behavior/named_persistent';
print STDERR 293, "
";
$L5=bless({$d,$H5,$o,$Q1,$p,$c,$q,$I5,$s,$J5,$g,$K5},$i);
print STDERR 294, "
";
$M5=$L5;
print STDERR 295, "
";
$N5=q'ni:/behavior/named_transient';
print STDERR 296, "
";
$O5={};
print STDERR 297, "
";
$P5=q'my $s = shift; Scalar::Util::weaken($ni::named{$s->name} = $s)';
print STDERR 298, "
";
$Q5=bless({$u,$P5},$l);
print STDERR 299, "
";
$R5=q'delete $ni::named{shift->name}';
print STDERR 300, "
";
$S5=bless({$u,$R5},$l);
print STDERR 301, "
";
$T5=[$Z1];
print STDERR 302, "
";
$U5={};
print STDERR 303, "
";
$V5=q'/behavior/named_transient';
print STDERR 304, "
";
$W5=bless({$d,$O5,$o,$Q5,$p,$S5,$q,$T5,$s,$U5,$g,$V5},$i);
print STDERR 305, "
";
$X5=$W5;
print STDERR 306, "
";
$Y5=q'ni:/behavior/ni_namespaced';
print STDERR 307, "
";
$Z5={};
print STDERR 308, "
";
$c6=[];
print STDERR 309, "
";
$d6={$J1,$L1};
print STDERR 310, "
";
$e6=q'/behavior/ni_namespaced';
print STDERR 311, "
";
$f6=bless({$d,$Z5,$o,$c,$p,$c,$q,$c6,$s,$d6,$g,$e6},$i);
print STDERR 312, "
";
$g6=$f6;
print STDERR 313, "
";
$h6=q'ni:/behavior/slice';
print STDERR 314, "
";
$i6=q'ni:/behavior/slice_init';
print STDERR 315, "
";
$j6={};
print STDERR 316, "
";
$k6=[];
print STDERR 317, "
";
$l6=q'my $class = shift;
my @isa;
push @isa, shift while ref $_[0];
my %args = @_;
+{ctor       => delete($args{ctor}),
  dtor       => delete($args{dtor}),
  applied_to => delete($args{applied_to}),
  isa        => \\@isa,
  methods    => \\%args};';
print STDERR 318, "
";
$m6=bless({$u,$l6},$l);
print STDERR 319, "
";
$n6=q'instantiation';
print STDERR 320, "
";
$o6=q'my $self = shift;
(@{$$self{isa}},
 applied_to => $$self{applied_to},
 %{$$self{methods}},
 $$self{ctor} ? (ctor => $$self{ctor}) : (),
 $$self{dtor} ? (dtor => $$self{dtor}) : ());';
print STDERR 321, "
";
$p6=bless({$u,$o6},$l);
print STDERR 322, "
";
$q6={$M,$m6,$n6,$p6};
print STDERR 323, "
";
$r6=q'/behavior/slice_init';
print STDERR 324, "
";
$s6=bless({$d,$j6,$o,$c,$p,$c,$q,$k6,$s,$q6,$g,$r6},$i);
print STDERR 325, "
";
$t6=$s6;
print STDERR 326, "
";
$u6=q'ni:/behavior/slice_named_init';
print STDERR 327, "
";
$v6={};
print STDERR 328, "
";
$w6=[];
print STDERR 329, "
";
$x6={$M,$J2};
print STDERR 330, "
";
$y6=q'/behavior/slice_named_init';
print STDERR 331, "
";
$z6=bless({$d,$v6,$o,$c,$p,$c,$q,$w6,$s,$x6,$g,$y6},$i);
print STDERR 332, "
";
$A6=$z6;
print STDERR 333, "
";
$B6=q'ni:/behavior/tag';
print STDERR 334, "
";
$C6={};
print STDERR 335, "
";
$D6=[];
print STDERR 336, "
";
$E6=q'my ($self, $p) = @_;
$_->apply($p) for @{$$self{slices}};
$self;';
print STDERR 337, "
";
$F6=bless({$u,$E6},$l);
print STDERR 338, "
";
$G6={$r1,$F6};
print STDERR 339, "
";
$H6=q'/behavior/tag';
print STDERR 340, "
";
$I6=bless({$d,$C6,$o,$c,$p,$c,$q,$D6,$s,$G6,$g,$H6},$i);
print STDERR 341, "
";
$J6=$I6;
print STDERR 342, "
";
$K6=q'ni:/class/behavior';
print STDERR 343, "
";
$L6=q'ni:/class/class';
print STDERR 344, "
";
$M6=q'ni:/class/fn';
print STDERR 345, "
";
$N6=q'ni:/class/image';
print STDERR 346, "
";
$O6={$O3,1};
print STDERR 347, "
";
$P6=[$P3,$q5];
print STDERR 348, "
";
$Q6=bless({$d,$O6,$g,$O3,$h,$P6},$e);
print STDERR 349, "
";
$R6=q'ni:/class/ni';
print STDERR 350, "
";
$S6={$k3,1};
print STDERR 351, "
";
$T6={};
print STDERR 352, "
";
$U6=[];
print STDERR 353, "
";
$V6='defclass';
print STDERR 354, "
";
$W6=q'shift; ni(\'ni:/class/class\')->new("/class/$_[0]", @_[1..$#_])';
print STDERR 355, "
";
$X6=bless({$u,$W6},$l);
print STDERR 356, "
";
$Y6='defslice';
print STDERR 357, "
";
$Z6=q'shift; ni(\'ni:/class/slice\')->new("/behavior/$_[0]", @_[1..$#_])';
print STDERR 358, "
";
$c7=bless({$u,$Z6},$l);
print STDERR 359, "
";
$d7={$V6,$X6,$Y6,$c7};
print STDERR 360, "
";
$e7=bless({$d,$T6,$o,$c,$p,$c,$q,$U6,$s,$d7,$g,$c},$i);
print STDERR 361, "
";
$f7=$e7;
print STDERR 362, "
";
$g7=[$f7,$l3];
print STDERR 363, "
";
$h7=bless({$d,$S6,$g,$k3,$h,$g7},$e);
print STDERR 364, "
";
$i7=q'ni:/class/slice';
print STDERR 365, "
";
$j7={$c,$l3,$m3,$r3,$s3,$C3,$D3,$y2,$E3,$S,$F3,$P3,$Q3,$q5,$r5,$E,$s5,$y5,$z5,$F5,$G5,$M5,$N5,$X5,$Y5,$g6,$h6,$v1,$i6,$t6,$u6,$A6,$B6,$J6,$K6,$g2,$L6,$A2,$M6,$g1,$N6,$Q6,$R6,$h7,$i7,$V2};
print STDERR 366, "
";
$k7=bless({},$k3);
print STDERR 367, "
";
*{$o1}=\&$k1;
print STDERR 368, "
";
*{$n1}=\&$i1;
print STDERR 369, "
";
*{$m1}=\&$k1;
print STDERR 370, "
";
*{$l1}=\&$i1;
print STDERR 371, "
";
$C->apply_unsafe($D);
print STDERR 372, "
";
$C->apply_unsafe($e);
print STDERR 373, "
";
$C->apply_unsafe($l);
print STDERR 374, "
";
$C->apply_unsafe($i);
print STDERR 375, "
";
$R->apply_unsafe($l);
print STDERR 376, "
";
$d1->apply_unsafe($l);
print STDERR 377, "
";
$u1->apply_unsafe($D);
print STDERR 378, "
";
$u1->apply_unsafe($i);
print STDERR 379, "
";
$x2->apply_unsafe($e);
print STDERR 380, "
";
$S2->apply_unsafe($i);
print STDERR 381, "
";
$j3->apply_unsafe($k3);
print STDERR 382, "
";
$q3->apply_unsafe($e);
print STDERR 383, "
";
$B3->apply_unsafe($e);
print STDERR 384, "
";
$N3->apply_unsafe($O3);
print STDERR 385, "
";
$p5->apply_unsafe($O3);
print STDERR 386, "
";
$x5->apply_unsafe($e);
print STDERR 387, "
";
$x5->apply_unsafe($i);
print STDERR 388, "
";
$E5->apply_unsafe($e);
print STDERR 389, "
";
$E5->apply_unsafe($i);
print STDERR 390, "
";
$L5->apply_unsafe($e);
print STDERR 391, "
";
$L5->apply_unsafe($i);
print STDERR 392, "
";
$f6->apply_unsafe($e);
print STDERR 393, "
";
$f6->apply_unsafe($i);
print STDERR 394, "
";
$s6->apply_unsafe($D);
print STDERR 395, "
";
$z6->apply_unsafe($i);
print STDERR 396, "
";
$e7->apply_unsafe($k3);
print STDERR 397, "
";
%ni::named=%$j7;
print STDERR 398, "
";
ni->run(@ARGV);
print STDERR 399, "
";
__DATA__
